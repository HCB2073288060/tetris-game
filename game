<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>俄罗斯方块</title>
    <style>
        body {
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
            background-color: #000;
            color: #fff;
            font-family: Arial, sans-serif;
        }
        canvas {
            border: 2px solid #fff;
            background-color: #000;
        }
    </style>
</head>
<body>
    <canvas id="tetris" width="300" height="600"></canvas>
    <script>
        const canvas = document.getElementById('tetris');
        const context = canvas.getContext('2d');

        const ROWS = 20;
        const COLS = 10;
        const BLOCK_SIZE = 30;

        context.scale(BLOCK_SIZE, BLOCK_SIZE);

        const board = Array.from({ length: ROWS }, () => Array(COLS).fill(0));

        const pieces = [
            [ [1, 1], [1, 1] ], // O
            [ [0, 1, 0], [1, 1, 1] ], // T
            [ [1, 0, 0], [1, 1, 1] ], // L
            [ [0, 0, 1], [1, 1, 1] ], // J
            [ [1, 1, 0], [0, 1, 1] ], // S
            [ [0, 1, 1], [1, 1, 0] ], // Z
            [ [0, 1, 0, 0], [0, 1, 0, 0], [0, 1, 0, 0], [0, 1, 0, 0] ] // I
        ];

        let piece = randomPiece();
        let position = { x: 3, y: 0 };

        function randomPiece() {
            return pieces[Math.floor(Math.random() * pieces.length)];
        }

        function draw() {
            context.fillStyle = '#000';
            context.fillRect(0, 0, canvas.width, canvas.height);

            board.forEach((row, y) => {
                row.forEach((value, x) => {
                    if (value) {
                        context.fillStyle = 'red';
                        context.fillRect(x, y, 1, 1);
                    }
                });
            });

            piece.forEach((row, y) => {
                row.forEach((value, x) => {
                    if (value) {
                        context.fillStyle = 'blue';
                        context.fillRect(x + position.x, y + position.y, 1, 1);
                    }
                });
            });
        }

        function update() {
            position.y++;
            if (collide()) {
                position.y--;
                merge();
                piece = randomPiece();
                position = { x: 3, y: 0 };
                if (collide()) {
                    alert('Game Over!');
                    board.forEach(row => row.fill(0));
                }
            }
        }

        function collide() {
            for (let y = 0; y < piece.length; y++) {
                for (let x = 0; x < piece[y].length; x++) {
                    if (piece[y][x] && (board[y + position.y] && board[y + position.y][x + position.x]) !== 0) {
                        return true;
                    }
                }
            }
            return false;
        }

        function merge() {
            piece.forEach((row, y) => {
                row.forEach((value, x) => {
                    if (value) {
                        board[y + position.y][x + position.x] = value;
                    clearLines();
                    draw();
                }
            });
        }

        function clearLines() {
            for (let y = board.length - 1; y >= 0; y--) {
                if (board[y].every(cell => cell !== 0)) {
                    board.splice(y, 1);
                    board.unshift(Array(COLS).fill(0));
                }
            }
        }

        document.addEventListener('keydown', event => {
            if (event.key === 'ArrowLeft') {
                position.x--;
                if (collide()) {
                    position.x++;
                }
            }
            if (event.key === 'ArrowRight') {
                position.x++;
                if (collide()) {
                    position.x--;
                }
            }
            if (event.key === 'ArrowDown') {
                position.y++;
                if (collide()) {
                    position.y--;
                }
            }
            if (event.key === 'ArrowUp') {
                const rotated = rotate(piece);
                if (!collide(rotated)) {
                    piece = rotated;
                }
            }
        });

        function rotate(piece) {
            const N = piece.length;
            const rotated = Array.from({ length: N }, () => Array(N).fill(0));
            for (let y = 0; y < N; y++) {
                for (let x = 0; x < N; x++) {
                    rotated[x][N - 1 - y] = piece[y][x];
                }
            }
            return rotated;
        }

        function gameLoop() {
            update();
            draw();
            requestAnimationFrame(gameLoop);
        }

        gameLoop();
    </script>
</body>
</html>
